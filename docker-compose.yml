version: '3.8'

services:
  aws-pr-mcp:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: aws-pr-mcp-server
    restart: unless-stopped
    
    # Environment variables
    environment:
      # AWS Configuration
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_SESSION_TOKEN: ${AWS_SESSION_TOKEN}
      
      # Application Configuration
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      SERVER_NAME: ${SERVER_NAME:-aws-pr-review}
      SERVER_VERSION: ${SERVER_VERSION:-1.0.0}
      
      # Security Configuration
      ENABLE_SECRETS_DETECTION: ${ENABLE_SECRETS_DETECTION:-true}
      ENABLE_COMPLIANCE_CHECKING: ${ENABLE_COMPLIANCE_CHECKING:-true}
      SEVERITY_THRESHOLD: ${SEVERITY_THRESHOLD:-medium}
      
      # Performance Configuration
      MAX_CONCURRENT_REQUESTS: ${MAX_CONCURRENT_REQUESTS:-10}
      REQUEST_TIMEOUT_SECONDS: ${REQUEST_TIMEOUT_SECONDS:-30}
      
    # Volumes
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - ./reports:/app/reports
      - aws-credentials:/root/.aws:ro
    
    # Network configuration
    networks:
      - aws-pr-mcp-network
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    
    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "import boto3; print('Health check passed')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: aws-pr-mcp-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis-data:/data
    networks:
      - aws-pr-mcp-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
    profiles:
      - cache

  # PostgreSQL for audit logging (optional)
  postgres:
    image: postgres:15-alpine
    container_name: aws-pr-mcp-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-aws_pr_mcp}
      POSTGRES_USER: ${POSTGRES_USER:-mcpuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - aws-pr-mcp-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
    profiles:
      - database

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: aws-pr-mcp-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - aws-pr-mcp-network
    depends_on:
      - aws-pr-mcp
    profiles:
      - proxy

networks:
  aws-pr-mcp-network:
    name: aws-pr-mcp-network
    driver: bridge

volumes:
  aws-credentials:
    name: aws-credentials
    external: true
  redis-data:
    name: aws-pr-mcp-redis-data
  postgres-data:
    name: aws-pr-mcp-postgres-data